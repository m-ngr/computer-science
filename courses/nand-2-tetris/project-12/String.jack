// Mahmoud Elnagar - 04/10/2022

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int capacity, size;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) { let maxLength = 1; }
        let capacity = maxLength;
        let size = 0;
        let str = Memory.alloc(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() { return size; }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) { return str[j]; }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c ;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size < capacity){
            let str[size] = c;
            let size = size + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size > 0) { let size = size - 1; }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int num, sign, i;
        let num = 0;
        let sign = 1;
        let i = 0;
        if (str[0] = 45) { let sign = -1; let i = 1; }

        while (i < size) {
            if ((47 < str[i]) & (str[i] < 58)){
                let num = (num * 10) + (str[i] - 48);
            }else{
                return (num * sign);
            }
            let i = i + 1;
        }

        return (num * sign);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int n, d;
        let size = 0;

        if(Math.abs(val) > 9){
            let n = val / 10;
            let d = Math.abs(val - (n * 10));
            do setInt(n);
            do appendChar(48 + d);
        }else{
            if (val < 0){
                do appendChar(45);
                let val = -val;
            }
            do appendChar(48 + val);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() { return 128; }

    /** Returns the backspace character. */
    function char backSpace() { return 129; }

    /** Returns the double quote (") character. */
    function char doubleQuote() { return 34; }
}
