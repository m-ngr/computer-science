// Mahmoud Elnagar - 03/10/2022

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = null;
        let heap[1] = 14334;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return ;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int targetSize, newSize, curr;
        let targetSize = size + 2;
        // skip segments with zero size
        while (~ (Memory.peek(freeList + 1) > 0)){
            let freeList = Memory.peek(freeList);
        }

        let curr = freeList;
        while(~(curr = 0)){
            let newSize = Memory.peek(curr + 1) - targetSize;
            if (~(newSize < 0)){
                do Memory.poke(curr + 1, newSize);
                let curr = curr + newSize + 2;
                do Memory.poke(curr, null);
                do Memory.poke(curr + 1, size);
                return (curr + 2);
            }
            let curr = Memory.peek(curr);
        }

        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int curr;
        let curr = freeList;

        while (~(Memory.peek(curr) = null)){
            let curr = Memory.peek(curr);
        }

        do Memory.poke(curr, o - 2);
        return;
    }    
}
