// Mahmoud Elnagar - 23/08/2022

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ALU(x=xin, y=yin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zero, ng=neg);
    // Register load controls
    Not(in=instruction[5], out=notInst5);
    Nand(a=notInst5, b=instruction[15], out=loadA);
    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=instruction[15], b=instruction[3], out=writeM);
    // D,A Registers
    DRegister(in=outALU, load=loadD, out=xin);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    Mux16(a=outA, b=inM, sel=instruction[12], out=yin); //A or M
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);// INST or ALU

    //Program counter logic
    Not(in=zero, out=notZero);
    Not(in=neg, out=notNeg);
    Not(in=pos, out=notPos);
    And(a=notZero, b=notNeg, out=pos);

    Mux(a=false, b=pos, sel=instruction[0], out=j01);
    Mux(a=zero, b=notNeg, sel=instruction[0], out=j23);
    Mux(a=neg, b=notZero, sel=instruction[0], out=j45);
    Mux(a=notPos, b=true, sel=instruction[0], out=j67);

    Mux(a=j01, b=j23, sel=instruction[1], out=j03);
    Mux(a=j45, b=j67, sel=instruction[1], out=j47);
    Mux(a=j03, b=j47, sel=instruction[2], out=j07);

    And(a=j07, b=instruction[15], out=loadPC);
    Not(in=loadPC, out=incPC);

    PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}